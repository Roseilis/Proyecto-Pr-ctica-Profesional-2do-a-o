import tkinter as tk
from tkinter import messagebox
import psycopg2
from sklearn.linear_model import LinearRegression
import numpy as np
import datetime

# Configuración de la conexión a la base de datos PostgreSQL
def conectar_db():
    return psycopg2.connect(
        dbname="Gestion-Embarazadas",
        user="admin",
        password="admin",
        host="localhost",
        port="5432"
    )

# Crear tablas necesarias si no existen
def crear_tablas():
    conn = conectar_db()
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS embarazadas (
            id SERIAL PRIMARY KEY,
            nombre VARCHAR(100),
            direccion VARCHAR(200),
            fecha_nacimiento DATE,
            fecha_ultima_menstruacion DATE,
            duracion_periodo INTEGER,
            talla FLOAT,
            peso FLOAT,
            edad_gestacional INTEGER,
            presion_1 FLOAT,
            presion_2 FLOAT,
            presion_3 FLOAT,
            presion_4 FLOAT,
            presion_5 FLOAT,
            antecedentes VARCHAR(200)
        );
    ''')
    conn.commit()
    conn.close()

# Función para calcular la fecha de parto
def calcular_fecha_parto(fecha_ultima_menstruacion, duracion_periodo):
    fecha_ultima_menstruacion = datetime.datetime.strptime(fecha_ultima_menstruacion, "%Y-%m-%d")
    fecha_parto = fecha_ultima_menstruacion + datetime.timedelta(days=280)
    return fecha_parto.strftime("%Y-%m-%d")

# Función para evaluar riesgos
def evaluar_riesgos(presiones, antecedentes):
    if np.mean(presiones) > 120:
        return "Hipertensión"
    if len(antecedentes.split(',')) > 2:
        return "Alto riesgo"
    return "Riesgo bajo"

# Función para calcular IMC y evaluar peso
def evaluar_peso(talla, peso, edad_gestacional):
    imc = peso / (talla ** 2)
    if imc < 18.5:
        return "Bajo peso"
    elif imc > 24.9:
        return "Sobrepeso"
    return "Peso normal"

# Interfaz gráfica con Tkinter
class CalculadoraAin(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Calculadora Ain")
        self.geometry("500x600")
        self.configure(bg='pink')
        self.create_widgets()
    
    def create_widgets(self):
        tk.Label(self, text="Bienvenido al sistema Calculadora Ain", bg='pink').pack()
        
        # Campos para iniciar sesión
        tk.Label(self, text="Usuario:", bg='pink').pack()
        self.usuario_entry = tk.Entry(self)
        self.usuario_entry.pack()
        
        tk.Label(self, text="Contraseña:", bg='pink').pack()
        self.contrasena_entry = tk.Entry(self, show="*")
        self.contrasena_entry.pack()
        
        tk.Button(self, text="Iniciar sesión", command=self.iniciar_sesion).pack()
        
        # Campos para introducir datos de la embarazada
        self.nombre_entry = tk.Entry(self)
        self.direccion_entry = tk.Entry(self)
        self.fecha_nacimiento_entry = tk.Entry(self)
        self.fecha_ultima_menstruacion_entry = tk.Entry(self)
        self.duracion_periodo_entry = tk.Entry(self)
        self.talla_entry = tk.Entry(self)
        self.peso_entry = tk.Entry(self)
        self.edad_gestacional_entry = tk.Entry(self)
        self.presion_entries = [tk.Entry(self) for _ in range(5)]
        self.antecedentes_entry = tk.Entry(self)
        
        # Botones para calcular y buscar
        tk.Button(self, text="Calcular fecha de parto y riesgos", command=self.calcular).pack()
        tk.Button(self, text="Buscar embarazada", command=self.buscar).pack()
    
    def iniciar_sesion(self):
        usuario = self.usuario_entry.get()
        contrasena = self.contrasena_entry.get()
        if usuario == "medico" and contrasena == "1234":
            messagebox.showinfo("Inicio de sesión", "Bienvenido al sistema Calculadora Ain")
            self.mostrar_campos()
        else:
            messagebox.showerror("Error", "Usuario o contraseña incorrectos")
    
    def mostrar_campos(self):
        tk.Label(self, text="Nombre:", bg='pink').pack()
        self.nombre_entry.pack()
        
        tk.Label(self, text="Dirección:", bg='pink').pack()
        self.direccion_entry.pack()
        
        tk.Label(self, text="Fecha de nacimiento (YYYY-MM-DD):", bg='pink').pack()
        self.fecha_nacimiento_entry.pack()
        
        tk.Label(self, text="Fecha de última menstruación (YYYY-MM-DD):", bg='pink').pack()
        self.fecha_ultima_menstruacion_entry.pack()
        
        tk.Label(self, text="Duración del periodo (días):", bg='pink').pack()
        self.duracion_periodo_entry.pack()
        
        tk.Label(self, text="Talla (m):", bg='pink').pack()
        self.talla_entry.pack()
        
        tk.Label(self, text="Peso (kg):", bg='pink').pack()
        self.peso_entry.pack()
        
        tk.Label(self, text="Edad gestacional (semanas):", bg='pink').pack()
        self.edad_gestacional_entry.pack()
        
        tk.Label(self, text="Presiones (5 días):", bg='pink').pack()
        for entry in self.presion_entries:
            entry.pack()
        
        tk.Label(self, text="Antecedentes (separados por comas):", bg='pink').pack()
        self.antecedentes_entry.pack()
    
    def calcular(self):
        fecha_ultima_menstruacion = self.fecha_ultima_menstruacion_entry.get()
        duracion_periodo = int(self.duracion_periodo_entry.get())
        talla = float(self.talla_entry.get())
        peso = float(self.peso_entry.get())
        edad_gestacional = int(self.edad_gestacional_entry.get())
        presiones = [float(entry.get()) for entry in self.presion_entries]
        antecedentes = self.antecedentes_entry.get()
        
        fecha_parto = calcular_fecha_parto(fecha_ultima_menstruacion, duracion_periodo)
        riesgo = evaluar_riesgos(presiones, antecedentes)
        peso_evaluacion = evaluar_peso(talla, peso, edad_gestacional)
        
        messagebox.showinfo("Resultados", f"Fecha de parto: {fecha_parto}\nRiesgo: {riesgo}\nPeso: {peso_evaluacion}")
    
    def buscar(self):
        nombre = self.nombre_entry.get()
        conn = conectar_db()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM embarazadas WHERE nombre = %s", (nombre,))
        embarazada = cursor.fetchone()
        if embarazada:
            messagebox.showinfo("Datos de la embarazada", 
                f"Nombre: {embarazada[1]}\nDirección: {embarazada[2]}\nFecha de nacimiento: {embarazada[3]}\n"
                f"Fecha de última menstruación: {embarazada[4]}\nDuración del periodo: {embarazada[5]}\n"
                f"Talla: {embarazada[6]}\nPeso: {embarazada[7]}\nEdad gestacional: {embarazada[8]}\n"
                f"Presiones: {embarazada[9:14]}\nAntecedentes: {embarazada[14]}")
        else:
            messagebox.showerror("Error", "Embarazada no encontrada")
        conn.close()

if __name__ == "__main__":
    crear_tablas()
    app = CalculadoraAin()
    app.mainloop()
